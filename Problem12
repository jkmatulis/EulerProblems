package problem.pkg12;

/*
The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
let us list the factors of the first seven triangle numbers:
 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
 */

public class Problem12 {
    
    //this formula finds the triangle number value
    public static long triangleNumber (long number) {
        long triangleNumberTotal;
        return triangleNumberTotal = ( number * ( number + 1 ) ) / 2;
    }
    
    //finds the number of divisor for a number and checks that against a limit
    public static boolean divisorFinder (long number, long limit) {
        int divisorCounter = 0;
        //originally I had termination set to i<=number/2 and divisorCounter to increase by one but this took to long 
        for (long i=1; i*i<=number; i++) {
            if (number % i == 0) {
                divisorCounter+=2;
            }
        }
        // if the number has enough divisors then false is returned as the for loop in the main is exited
        if (divisorCounter >= limit) {
            System.out.println("The number is " + number + " with " + divisorCounter + " divisors");
            return false;
        }
        // if a number with the desired qualifications is not found then true is returned and the next iteration is run
        return true;
    }
    
    public static void main(String[] args) {
        
        boolean stopCondition = true;
        for (long i=1; stopCondition; i++) {
            stopCondition = divisorFinder(triangleNumber(i),500); 
        }
        
    }
}
