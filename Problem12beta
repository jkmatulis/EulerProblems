/*with smaller numbers this code works find, but for the problem itself its taking way to long.
  Ive let it run for over twenty minutes and not got an answer for a number more then twenty divisors.
  I'll get it eventually!
*/

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package problem.pkg12;

/*
The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
et us list the factors of the first seven triangle numbers:
 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
 */
public class Problem12 {
    
    public static long triangleNumber (long number) {
        long sequenceTotal = 0;
        for (long i=1; i<=number; i++) {
            sequenceTotal = sequenceTotal + i;
        }
        return sequenceTotal;
    }
    
    public static boolean divisorFinder (long number, long limit) {
        int divisorCounter = 0;
        for (long i=1; i<=number/2; i++) {
            if (number % i == 0) {
                divisorCounter++;
            }
        }
        if (divisorCounter >= limit) {
            System.out.println("The number is " + number + " with " + divisorCounter + " divisors");
            return false;
        }
        return true;
    }
    
    public static void main(String[] args) {
        boolean stopCondition = true;
        for (long i=1; stopCondition; i++) {
            stopCondition = divisorFinder(triangleNumber(i),500); 
        }
        
    }
}
